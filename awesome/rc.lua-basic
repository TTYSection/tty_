    -- Standard awesome library
    require("awful")
    require("awful.autofocus")
    require("awful.rules")
    require("vicious")
    -- Theme handling library
    require("beautiful")
    -- Notification library
    require("naughty")
    --os.setlocale("pl_PL.utf8")
    -- Load Debian menu entries
    --require("debian.menu")
     
    -- {{{ Variable definitions
    -- Themes define colours, icons, and wallpapers
    beautiful.init("/usr/share/awesome/themes/default/theme.lua")

    -- This is used later as the default terminal and editor to run.
    terminal = "urxvt -T [terminal] -e screen -U"
    editor = os.getenv("EDITOR") or "editor"
    editor_cmd = terminal .. " -e " .. editor
    browser = "firefox"
     
    -- Default modkey.
    -- Usually, Mod4 is the key with a logo between Control and Alt.
    -- If you do not like this or do not have such a key,
    -- I suggest you to remap Mod4 to another key using xmodmap or other tools.
    -- However, you can use another modifier like Mod1, but it may interact with others.
    modkey = "Mod4"
     
    -- Table of layouts to cover with awful.layout.inc, order matters.
    layouts =
    {
        awful.layout.suit.floating,
        awful.layout.suit.tile,
        awful.layout.suit.tile.left,
        awful.layout.suit.tile.bottom,
        awful.layout.suit.tile.top,
        awful.layout.suit.fair,
        awful.layout.suit.fair.horizontal,
        awful.layout.suit.spiral,
        awful.layout.suit.spiral.dwindle,
        awful.layout.suit.max,
        awful.layout.suit.max.fullscreen,
        awful.layout.suit.magnifier
    }
    -- }}}
     
    -- {{{ Tags
    -- Define a tag table which hold all screen tags.
    tags = {}
    tagnames = { "irc",  "mpd", "net", "usr", "png", "msg", }
    taglayouts = {
            awful.layout.suit.tile.top,
            awful.layout.suit.tile.bottom,
            awful.layout.suit.floating,
            awful.layout.suit.fair,
            awful.layout.suit.floating,
            awful.layout.suit.floating }
                   
    for s = 1, screen.count() do
        -- Each screen has its own tag table.
        tags[s] = {}
        for tagnumber = 1, 6 do
            -- Add tags and name them.
            tags[s][tagnumber] = tag(tagnames[tagnumber])
            -- Add tags to screen one by one, giving them their layouts at the same time.
            tags[s][tagnumber].screen = s
            awful.layout.set(taglayouts[tagnumber], tags[s][tagnumber])
        end
        -- I'm sure you want to see at least one tag.
        tags[s][1].selected = true
    end
    -- }}}
     
    awful.util.spawn_with_shell("~/.scripts/mpd.sh")
    awful.util.spawn_with_shell("mpd &")
    awful.util.spawn_with_shell("mpdscribble &")
    awful.util.spawn_with_shell("xrandr -s 1800x1080")
    awful.util.spawn_with_shell("fbxkb &")
    awful.util.spawn_with_shell("xcompmgr -c -F -t-2 -l-4 -r4 -o.80 &")
    awful.util.spawn_with_shell("setxkbmap -option grp:sclk_toggle,grp_led:scroll pl,epo,'ru(phonetic)' &")
    awful.util.spawn_with_shell("nitrogen --restore &")
     
     
    -- {{{ Menu
    -- Create a laucher widget and a main menu
    myawesomemenu = {
       { "►  manual", terminal .. " -e man awesome" },
       { "►  rc.lua", "mousepad /home/lukaso/.config/awesome/rc.lua" },
       { "►  theme.lua", "gksu pcmanfm /usr/share/awesome" },
       { "►  aw_themes", "gksu pcmanfm /usr/share/awesome" },
       { "►  restart", awesome.restart },
       { "►  exit", awesome.quit }
    }
     
    musicmenu = {
       { "►  moc", "urxvt -e mocp" },
       { "►  ncmpcpp", "urxvt -T [ncmpcpp] -e ncmpcpp" },
       { "►  deadbeef", "deadbeef" },
       { "►  sonata", "sonata" }
    }
     
    newsmenu = {
       { "►  identicurse", "urxvt -e identicurse" },
       { "►  newsbeuter", "urxvt -T [newsbeuter] -e screen -U newsbeuter -r" },
       { "►  tudu", "urxvt -T [tudu] -e tudu" }
    }
     
    netmenu = {
       { "►  weechat" ,"urxvt -e weechat-curses" },
       { "►  xchat", "xchat" },
       { "►  uGet", "uget-gtk" },
       { "►  gFTP", "gftp-gtk" },
       { "►  linphone", "linphone" },
       { "►  linphonec", "urxvt -T [linphone-cli] -e linphonec -V" }
    }
     
    toolmenu = {
       { "►  scrot", "xfce4-screenshooter" },
       { "►  calibre", "calibre" },
       { "►  gtk-conf", "gtk-chtheme" },
       { "►  mc", "urxvt -e mc" },
       { "►  ranger", "urxvt -T [ranger] -e ranger" },
       { "►  glances", "urxvt -T [procesy] -e glances" },
       { "►  nitrogen", "nitrogen" },
       { "►  appfinder",  "xfce4-appfinder" },
       { "►  htop",  "urxvt -T [procesy] -e htop" },
       { "►  synaptic",  "gksu synaptic" },
       { "►  xscreensaver", "xscreensaver-demo" }
    }
     
    graphmenu = {
       { "►  gimp", "gimp" },
       { "►  inkscape", "inkscape" },
       { "►  mirage", "mirage" }
    }
     
    videomenu = {
       { "►  smplayer", "smplayer" },
       { "►  vlc", "vlc" }
    }
     
    mymainmenu = awful.menu({ items = { { " ··· MENU ···" },
                                        { "" },
                                        { "▷  terminal", "urxvt" },
                                        { "▷  firefox", "/home/lukaso/.firefox/firefox" },
                                        { "▷  tor-firefox", "/home/lukaso/.tor-browser_pl/start-tor-browser" },
                                        { "▷  thunderbird", "/home/lukaso/.thunderbird/thunderbird" },
                                        { "▷  files", "pcmanfm /home/lukaso" },
                                        { "▷  irc", "urxvt -e weechat-curses" },
                                        { "" },
                                        { "audio ", musicmenu },
                                        { "irc|net", netmenu },
                                        { "info ", newsmenu },
                                        { "graph ", graphmenu },
                                        { "video ", videomenu },
                                        { "tools ", toolmenu },
                                        { "awesome", myawesomemenu },
                                        { "" },    
                                        { "··· power|off ", "urxvt -T [ZAMYKANIE-SYSTEMU] -e gksu poweroff" },
                                        { "" }
                                      }
                       
                            })
                           
    mylauncher = awful.widget.launcher({ image = theme.awesome_icon,
                                         menu = mymainmenu })
                         
     
    -- }}}
     
    -- {{{ Wibox
    -- Create a netwidget
    dnicon = widget({ type = "imagebox" })
    upicon = widget({ type = "imagebox" })
    dnicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/arrow1_s.png")
    upicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/arrow1_n.png")
     
    -- Create a cpuwidget
    cpuicon = widget({ type = "imagebox" })
    cpuicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/loop.png")
     
    -- Create a timewidget
    timeicon = widget({ type = "imagebox" })
    timeicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/calendar.png")
     
    -- Create a mpdwidget
    mpdicon = widget({ type = "imagebox" })
    mpdicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/music.png")
     
    -- Create a volumewidget
    volicon = widget({ type = "imagebox" })
    volicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/volume_low.png")
     
    -- Create a memuwidget
    memicon = widget({ type = "imagebox" })
    memicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/graph.png")
     
    -- Create a timewidget
    sysicon = widget({ type = "imagebox" })
    sysicon.image = image("/usr/share/awesome/icons/debian.png")
     
    -- Create a timewidget
    uptimeicon = widget({ type = "imagebox" })
    uptimeicon.image = image("/usr/share/awesome/icons_pixel/png/green/64x64/time.png")
     
     
     
    -- Initilize widget
    netwidget = widget({ type = "textbox" })
    -- Register widget
    vicious.register(netwidget, vicious.widgets.net, " ${eth0 up_kb}kb/s · ${eth0 down_kb}kb/s ", 1)
     
    -- Initilize widget
    volwidget = widget({ type = "textbox" })
    -- Register widget
    vicious.register(volwidget, vicious.widgets.volume, " $1% ", 2, "Master")
     
    -- Initialize widget
    mycpubox = widget({ type = "textbox" })
    mycpubox.text = "CPU "
     
    -- Initialize widget
    mympdbox = widget({ type = "textbox" })
    mympdbox.text = " "
     
    -- Initialize widget
    mymembox = widget({ type = "textbox" })
    mymembox.text = "MEM "
     
    -- Initialize widget
    mynetbox = widget({ type = "textbox" })
    mynetbox.text = "NET "
     
    -- Initialize widget
    myswapbox = widget({ type = "textbox" })
    myswapbox.text = "SWAP "
     
    -- Initialize widget
    uptimewidget = widget({ type = "textbox" })
    -- Register widget
    vicious.register(uptimewidget, vicious.widgets.uptime,
     function (widget, args)
        return string.format("[uptm]: %02dd··%02dh··%02dm", args[1], args[2], args[3])
     end, 61)
     
     
    -- Initialize widget
    syswidget = widget({ type = "textbox" })
    vicious.register( syswidget, vicious.widgets.os, "$4 $2")
     
    -- Initialize widget
    myvolume = widget({ type = "textbox" })
    myvolume.text = "VOL "
     
     
    -- {{{ Reusable separators
    spacer    = widget({ type = "textbox"  })
    separator = widget({ type = "imagebox" })
    spacer.text     = " | "
    separator.image = image(beautiful.widget_sep)
     
    -- Initialize widget
    memwidget = widget({ type = "textbox" })
    -- Register widget
    vicious.register(memwidget, vicious.widgets.mem, " $1% ", 2)
     
    --- Initialize widget
    cpuwidget = widget({ type = "textbox" })
    -- Register widget
    vicious.register(cpuwidget, vicious.widgets.cpu, " $1% ")
     
    -- Initialize widget
    mpd_text_box = widget({ type = "textbox" })
    mpd_text_box.text = ""
    mpd_time_box = widget({ type = "textbox" })
    mpd_time_box.text = ""
     
    mpd_text_max_size = 30
    mpd_text = ""
     
    -- Register widget
    function mpd_text_rotate()
        if string.len(mpd_text) >= mpd_text_max_size then
            mpd_text = string.gsub(mpd_text, '^(.)(.+)$', '%2%1')
            mpd_text_box.text = string.sub(mpd_text, 1, mpd_text_max_size).."..."
        else
            mpd_text_box.text = mpd_text
        end
    end
     
    awful.hooks.timer.register(0.4, function()
        mpd_text_rotate()
    end)
     
    -- Create a textclock widget
    mytextclock = awful.widget.textclock({ align = "right" })
    -- Calendar widget to attach to the textclock
    require('calendar2')
    calendar2.addCalendarToWidget(mytextclock)
     
    -- Create a systray
    mysystray = widget({ type = "systray" })
    -- Create a wibox for each screen and add it
    mywibox = {}
    mylayoutbox = {}
    mypromptbox = {}
    mytaglist = {}
    mytaglist.buttons = awful.util.table.join(
                        awful.button({ }, 1, awful.tag.viewonly),
                        awful.button({ modkey }, 1, awful.client.movetotag),
                        awful.button({ }, 3, awful.tag.viewtoggle),
                        awful.button({ modkey }, 3, awful.client.toggletag),
                        awful.button({ }, 4, awful.tag.viewnext),
                        awful.button({ }, 5, awful.tag.viewprev)
                        )
    mytasklist = {}
    mytasklist.buttons = awful.util.table.join(
                         awful.button({ }, 1, function (c)
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  client.focus = c
                                                  c:raise()
                                              end),
                         awful.button({ }, 3, function ()
                                                  if instance then
                                                      instance:hide()
                                                      instance = nil
                                                  else
                                                      instance = awful.menu.clients({ width=250 })
                                                  end
                                              end),
                         awful.button({ }, 4, function ()
                                                  awful.client.focus.byidx(1)
                                                  if client.focus then client.focus:raise() end
                                              end),
                         awful.button({ }, 5, function ()
                                                  awful.client.focus.byidx(-1)
                                                  if client.focus then client.focus:raise() end
                                              end))
     
    for s = 1, screen.count() do
        -- Create a promptbox for each screen
        mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
        -- Create an imagebox widget which will contains an icon indicating which layout we're using.
        -- We need one layoutbox per screen.
        mylayoutbox[s] = awful.widget.layoutbox(s)
        mylayoutbox[s]:buttons(awful.util.table.join(
                               awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                               awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                               awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                               awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
        -- Create a taglist widget
        mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)
     
        -- Create a tasklist widget
        mytasklist[s] = awful.widget.tasklist(function(c)
                                                  return awful.widget.tasklist.label.currenttags(c, s)
                                              end, mytasklist.buttons)
       
            -- Create the wibox
        mywibox[s] = awful.wibox({ position = "top", screen = s, height = 16 })
        mywibox2 = awful.wibox({ position = "bottom", screen = 1, height = 16 })      
        -- Add widgets to the wibox - order matters
                       
        mywibox[s].widgets = {
            {
                spacer,
                mylauncher,
                spacer,
                mytaglist[s],
                spacer,
                mylayoutbox[s],
                spacer,
                mypromptbox[s],
                layout = awful.widget.layout.horizontal.leftright
            },
            s == 1 and mysystray or nil,
            mytextclock,
            timeicon,
            spacer,
            mytasklist[s],
            spacer,
            mysystray,
            layout = awful.widget.layout.horizontal.rightleft
            }  
        -- mywibox[s].border_width = "2"
        -- mywibox[s].border_color = beautiful.fg_urgent
        -- mywibox[s].width = "1366"
       
        mywibox2.widgets = {
            {
                spacer,
                uptimewidget,
                spacer,
                syswidget,
                spacer,
                layout = awful.widget.layout.horizontal.leftright
            },
            mpd_text_box,
            mympdbox,
            mpdicon,
            spacer,
            volwidget, volicon,
            spacer,
            cpuwidget, cpuicon,
            spacer,
            memwidget, memicon,
            spacer,
            dnicon,
            netwidget,
            upicon,
            layout = awful.widget.layout.horizontal.rightleft
        }
    end
    -- }}}
     
    -- {{{ Mouse bindings
    root.buttons(awful.util.table.join(
        awful.button({ }, 3, function () mymainmenu:toggle() end),
        awful.button({ }, 4, awful.tag.viewnext),
        awful.button({ }, 5, awful.tag.viewprev)
    ))
    -- }}}
     
    -- {{{ Key bindings
    globalkeys = awful.util.table.join(
        awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
        awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
        awful.key({ modkey,           }, "Escape", awful.tag.history.restore),
     
        awful.key({ modkey,           }, "j",
            function ()
                awful.client.focus.byidx( 1)
                if client.focus then client.focus:raise() end
            end),
        awful.key({ modkey,           }, "k",
            function ()
                awful.client.focus.byidx(-1)
                if client.focus then client.focus:raise() end
            end),
        awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),
     
        -- Layout manipulation
        awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
        awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
        awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
        awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
        awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
        awful.key({ modkey,           }, "Tab",
            function ()
                awful.client.focus.history.previous()
                if client.focus then
                    client.focus:raise()
                end
            end),
     
        -- Standard program
        awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
        awful.key({ modkey, "Control" }, "r", awesome.restart),
        awful.key({ modkey, "Shift"   }, "q", awesome.quit),
     
        awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
        awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
        awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
        awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
        awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
        awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
        awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
        awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
        awful.key({ "Shift"           }, "#111",  function () awful.util.spawn("amixer -q sset Master 4+", false) end),
        awful.key({ "Shift"           }, "#116",  function () awful.util.spawn("amixer -q sset Master 4-", false) end),
     
        -- Prompt
        awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),
     
        awful.key({ modkey }, "x",
                  function ()
                      awful.prompt.run({ prompt = "Run Lua code: " },
                      mypromptbox[mouse.screen].widget,
                      awful.util.eval, nil,
                      awful.util.getdir("cache") .. "/history_eval")
                  end)
    )
     
    clientkeys = awful.util.table.join(
        awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
        awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
        awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
        awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
        awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
        awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
        awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
        awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
        awful.key({ modkey,           }, "m",
            function (c)
                c.maximized_horizontal = not c.maximized_horizontal
                c.maximized_vertical   = not c.maximized_vertical
            end)
    )
     
    -- Compute the maximum number of digit we need, limited to 9
    keynumber = 0
    for s = 1, screen.count() do
       keynumber = math.min(9, math.max(#tags[s], keynumber));
    end
     
    -- Bind all key numbers to tags.
    -- Be careful: we use keycodes to make it works on any keyboard layout.
    -- This should map on the top row of your keyboard, usually 1 to 9.
    for i = 1, keynumber do
        globalkeys = awful.util.table.join(globalkeys,
            awful.key({ modkey }, "#" .. i + 9,
                      function ()
                            local screen = mouse.screen
                            if tags[screen][i] then
                                awful.tag.viewonly(tags[screen][i])
                            end
                      end),
            awful.key({ modkey, "Control" }, "#" .. i + 9,
                      function ()
                          local screen = mouse.screen
                          if tags[screen][i] then
                              awful.tag.viewtoggle(tags[screen][i])
                          end
                      end),
            awful.key({ modkey, "Shift" }, "#" .. i + 9,
                      function ()
                          if client.focus and tags[client.focus.screen][i] then
                              awful.client.movetotag(tags[client.focus.screen][i])
                          end
                      end),
            awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                      function ()
                          if client.focus and tags[client.focus.screen][i] then
                              awful.client.toggletag(tags[client.focus.screen][i])
                          end
                      end))
    end
     
    clientbuttons = awful.util.table.join(
        awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
        awful.button({ modkey }, 1, awful.mouse.client.move),
        awful.button({ modkey }, 3, awful.mouse.client.resize))
     
    -- Set keys
    root.keys(globalkeys)
    -- }}}
     
    -- {{{ Rules
    awful.rules.rules = {
        -- All clients will match this rule.
        { rule = { },
          properties = { border_width = beautiful.border_width,
                         border_color = beautiful.border_normal,
                         focus = true,
                         keys = clientkeys,
                         buttons = clientbuttons } },
        { rule = { class = "MPlayer" },
          properties = { floating = true } },
        { rule = { class = "pinentry" },
          properties = { floating = true } },
        { rule = { class = "gimp" },
          properties = { floating = true } },
        -- Set Firefox to always map on tags number 2 of screen 1.
        -- { rule = { class = "Firefox" },
        --   properties = { tag = tags[1][2] } },
    }
    -- }}}
     
    -- {{{ Signals
    -- Signal function to execute when a new client appears.
    client.add_signal("manage", function (c, startup)
        -- Add a titlebar
        -- awful.titlebar.add(c, { modkey = modkey })
     
        -- Enable sloppy focus
        c:add_signal("mouse::enter", function(c)
            if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
                and awful.client.focus.filter(c) then
                client.focus = c
            end
        end)
     
        if not startup then
            -- Set the windows at the slave,
            -- i.e. put it at the end of others instead of setting it master.
            -- awful.client.setslave(c)
     
            -- Put windows in a smart way, only if they does not set an initial position.
            if not c.size_hints.user_position and not c.size_hints.program_position then
                awful.placement.no_overlap(c)
                awful.placement.no_offscreen(c)
            end
        end
    end)
     
    client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
    client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
    -- }}}
     
    awful.util.spawn_with_shell("COMMAND1")
    awful.util.spawn_with_shell("COMMAND2")

